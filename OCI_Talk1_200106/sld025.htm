
<!--  Presentation generated by Internet Assistant for Microsoft PowerPoint 97 -->

<HTML>
<HEAD>

<meta name="GENERATOR" content="Microsoft Internet Assistant for Microsoft PowerPoint 97">
 <TITLE>Mapping the OCI API to Perl #2</TITLE> 
</HEAD>

<BODY     >

<CENTER>
<TABLE WIDTH=100%> 
     <TR> <TD WIDTH=100% ALIGN=CENTER>
         <A HREF="sld001.htm">First</A>&nbsp;&nbsp;
         <A HREF="sld024.htm">Previous</A>&nbsp;&nbsp;
         <A HREF="sld026.htm">Next</A>&nbsp;&nbsp;
         <A HREF="sld036.htm">Last</A>&nbsp;&nbsp;
&nbsp;&nbsp;         <A HREF="index.htm">Index</A>&nbsp;&nbsp;
         <A HREF="tsld025.htm">Text</A>&nbsp;&nbsp;
     </TD> </TR>
     <TR> <TD WIDTH=100% ALIGN=CENTER>
         <IMG SRC="img025.gif" usemap="#Objmap" WIDTH=800 HEIGHT=600 BORDER=0>
     </TD> </TR>
</TABLE>
<P>Slide 25 of 36</P>
</CENTER>
<!-- <UL>
<H2>Mapping the OCI API to Perl #2</H2>
</UL></P>
<P><UL>
<LI><H2>Minor inconveniences
</H2>
<UL>
<LI>OCI functions that take string + string length pairs
<UL>
<LI>would need	OCIFoo(…, $string, length($string), …);
<LI>maybe do	OCIFoo(…, ocistrlen($string), …);
<UL>
which would return both values for you as a convenience
<BR><BR>
</UL></UL></UL></UL><UL>
<LI><H2>More tricky issues
</H2>
<UL>
<LI>OCI functions that want to write to a pre-allocated buffer and update a separate parameter with the output length
<UL>
<LI>I think I have a neat solution to this
</UL><LI>OCI functions with void* output parameters such as OCIAttrGet()
<UL>
<LI>need to know what class to bless them into - use a lookup table</UL></UL></UL></P>
<P>  -->
</Body>
</HTML>
